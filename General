

'**********************************************************************
' Function Name: RunIteration
' Purpose: returns a true or false based on whether an iteration number falls withing an adanvced range
'Author: Adam Thomas
'	Samples of an (advanced)iteration range are as follows:
'	IterationRange = "1,2,3,4-10"
'	IterationRange2 = "4-10"
'	IterationRange3 = "<ALL>"
'	IterationRange4 = "2"
'	IterationRange5 = "7-9,3,5"
'	IterationRange6 = "<FIRST>"
'	IterationRange7 = "<LAST>"
'	IterationRange8 = "2,7,8"
'	IterationRange9 = "1"
' Inputs:
'	CurrentIteration
'	IterationRange
'	LastRow
' Returns: True/False
' Prerequisites: Unknown
'**********************************************************************
Function RunIteration(CurrentIteration, IterationRange, LastRow)
	CI = CStr(CurrentIteration)
	IR = Trim(UCase(IterationRange))
	LR = CStr(LastRow)
	'Look for key words
	Select Case IR
	Case "<ALL>"
		Result = True
	Case "<FIRST>"
		If CI = "1" Then
			Result = True
		Else
			Result = False
		End If
	Case "<LAST>"
		If CI = LR Then
			Result = True
		Else
			Result = False
		End If
	Case Else
		'Catch all numbers in lists and ranges
		aNums = Split(IterationRange, ",")
		For i = 0 To UBound(aNums) Step 1
			If Instr(aNums(i), "-") > 0 Then
				aRange = Split(aNums(i), "-")
				For RangeNume = CInt(aRange(0)) To CInt(aRange(1)) Step 1
					LargeSet = CStr(RangeNume) & "~" & LargeSet
				Next
			Else
				LargeSet = aNums(i) & "~" & LargeSet
			End If
		Next
		aLargeSet = Split(LargeSet, "~")
		Result = False
		For Each Num in aLargeSet
			If CI = Trim(CStr(Num)) Then
				Result = True
			End If
		Next
	End Select
	'Tell caller whether to run the current iteration or not
	RunIteration = Result
End Function

'**********************************************************************
' Function Name: GetTestParameter
' Purpose: Retrieves parameter data from the data sheet attached to the current test case
' Author: Adam Thomas
' Input:
'	TestParameter
'	Iteration'
' Return: String
' Prerequisites: Unknown
'**********************************************************************
Function GetTestParameter(TestParameter, Iteration)
	CurrentTestID = GetCurrentTestID()
	TempFolder = GetSystemTempFolder()
	AttachPath = DownloadAttachmentFromTest(CurrentTestID, "TestData.xlsx", TempFolder)
	Set DS = InstantiateExcel(AttachPath, "Input")
	Col = DS.Find(TestParameter, "A1:ZZ1", "Col")
	GetTestParameter = DS.GetCellData(Iteration + 1, Col)
	DS.Destruct
End Function

'**********************************************************************
' Function Name: GetScenarioDataRowCount
' Purpose: Retrieves the amount of rows that contain data from the TestData.xlsx
'	 that is attached the the scenario/driver(test)
' Author: Adam Thomas
' Input:
'	ScenarioTestID
' Return: integer
' Prerequisites:
'**********************************************************************
Function GetScenarioDataRowCount(ScenarioTestID)
	TempFolder = CreateTempFolder("C:\Temp\UFT\")
	AttachPath = DownloadAttachmentFromTest(ScenarioTestID, "TestData.xlsx", TempFolder)
	Set DS = InstantiateExcel(AttachPath, "Sheet1")
	GetScenarioDataRowCount = DS.FindFirstEmptyRow("A") - 2
	DS.Destruct
	DeleteFileByPath AttachPath
End Function

'**********************************************************************
' Function Name: GetData
' Purpose: Gets data from the data table and converts any key words to the
'	appropriate string
' Author: Adam Thomas
' Input:
'	Parameter
'	DatableObject
' Return: string
' Prerequisites:
'**********************************************************************
Function GetData(DatableObject, Parameter)
	TempData = DatableObject.GetParameter(Parameter)

	Select Case UCase(TempData)
		Case "<TODAY>", "<NOW>", "<CURRENTDATE>"
			DataOut = Date()
		Case Else
			DataOut = TempData
	End Select

	GetData = Trim(DataOut)
End Function

'**********************************************************************
' Function Name: SetSelectOptional
' Purpose: Selects an item from a dropdown ONLY if there is data provided in
'	the parameter
' Sample implementation:
' RegisterUserFunc "SwfComboBox", "SelectOptional", "SetSelectOptional"
' Author: Adam Thomas
' Input:
'	SelectObject
'	DatatableObject
'	Parameter
' Return: string?
' Prerequisites:
'**********************************************************************
Function SetSelectOptional(SelectObject, DatatableObject, Parameter)
	SelectData = GetData(DatatableObject, Parameter)
	If SelectData <> "" Then
		SelectObject.Select SelectData
	End If
End Function

'**********************************************************************
' Function Name: SelectNullAllItemsCombo
' Purpose:
' Sample implementation:
' RegisterUserFunc "SwfComboBox", "SelectEnhanced", "SelectNullAllItemsCombo"
' Author: Adam Thomas
' Input:
'	ComboBoxObject
'	ItemText
' Return:
' Prerequisites:
'**********************************************************************
Function SelectNullAllItemsCombo(ComboBoxObject, ItemText)
	SuccessFlag = False
	Count = ComboBoxObject.GetItemsCount()
	ComboBoxObject.Click

	For i = 0 To Count Step 1
		If ComboBoxObject.GetROProperty("text") = ItemText Then
			SuccessFlag = True
			Exit For
		End If
		SendKeys "{DOWN}"
		Wait 0,250
	Next

	If Not SuccessFlag Then
		For i = 0 To Count Step 1
			If ComboBoxObject.GetROProperty("text") = ItemText Then
				SuccessFlag = True
				Exit For
			End If
			SendKeys "{UP}"
			Wait 0,250
		Next
	End If

	Name = ComboBoxObject.GetRoProperty("swfname")
	CurValue = ComboBoxObject.GetROProperty("text")
	ComboBoxObject.Click ' force dropdown to close, to not cover up the "Add" button
	If Not Successflag Then
		Reporter.ReportEvent micFail, "Select from Combobox", "Combo object name: " & Name _
		& ML(2) & "Item requested: " & ItemText & ML(2) & "Value Selected: " & CurValue
	End If

End Function

'**********************************************************************
' Function Name:SetUpComponentData
' Purpose: Pulls data from the TestData.xls attached to a test id and loads it
'	into the datable and sets the current rom being read from
' Author: Adam Thomas
' Input:
'	ScenarioTestID
'	IterationID
' Return: DataTable
' Prerequisites:
'**********************************************************************
Function SetUpComponentData(ScenarioTestID, IterationID)
	SuccessFlag = False
	DataPath = GetTestData(ScenarioTestID)
	DataTable.ImportSheet DataPath, "Sheet1", dtLocalSheet
	DeleteFileByPath DataPath

	Set DT = DataTable.GetSheet(dtlocalSheet)

	For r = 1 To 1000 Step 1
		DT.SetCurrentRow r
		If UCase(DT.GetParameter("IterationID")) = UCase(IterationID) Then
			SuccessFlag = True
			Exit For
		ElseIf UCase(DT.GetParameter("IterationID")) = "" Then
			SuccessFlag = False
			Exit For
		End If
	Next

	If SuccessFlag Then
		Reporter.ReportEvent micPass, "Data Setup", "Test data was pulled from scenario ID: " & ScenarioTestID & ML(2) _
		& "Temporary Download location: " & DataPath & ML(2) _
		& "Current Iteration ID: " & IterationID
	Else
		Reporter.ReportEvent micPass, "Data Setup", "Test data was pulled from scenario ID: " & ScenarioTestID & ML(2) _
		& "Temporary Download location: " & DataPath & ML(2) _
		& "Current Iteration ID not found, data table row set to 1 by default: " & IterationID
		DT.SetCurrentRow 1
	End If

	Set SetUpComponentData = DT
End Function

'**********************************************************************
' Function Name: UploadComponentData
' Purpose: Pushes the datatable to the scenario(test) Id as an attachment
' Author: Adam Thomas
' Input:
'	ScenarioTestID'
' Return: None
' Prerequisites:
'**********************************************************************
Function UploadComponentData(ScenarioTestID)
	TempFolder = CreateTempFolder("C:\Temp\UFT\")
	DataTable.ExportSheet TempFolder & "TestData.xlsx", DTLocalSheet, "Sheet1"
	'Back up ALM copy of Test Data
	RenameAttachmentFromTest ScenarioTestID, "TestData.xlsx", "TestData - BACKUP.xlsx"
	' UploadAttachmentToTest(TestID, LocalPath)
	UploadAttachmentToTest ScenarioTestID, TempFolder & "TestData.xlsx"
	' RemoveAttachmentFromTest(TestID, Filename)
	RemoveAttachmentFromTest ScenarioTestID, "TestData - BACKUP.xlsx"
End Function

'**********************************************************************
' Function Name:
' Purpose: Retrieves the data sheet attached to the current test case
' Author: Adam Thomas
' Input:
'	ScenarioTestID'
' Return:
' Prerequisites:
'**********************************************************************
Function GetTestData(ScenarioTestID)
	TempFolder = CreateTempFolder("C:\Temp\UFT\")
	GetTestData = DownloadAttachmentFromTest(ScenarioTestID, "TestData.xlsx", TempFolder)
End Function

'**********************************************************************
' Function Name: IESave
' Purpose: Uses the IE download prompt to same and locate a file being saved
'	from IE
' Author: Adam Thomas
' Input:
'	Timeout
' Return:
' Prerequisites:
'	methods:
' 		GetLatestDownload()
'**********************************************************************
Function IESave(Timeout)
	ReportingOff
	PossibleOldDL = GetLatestDownload()

	Setting("DefaultTimeOut")= "500"
	Break = False
	Success = False
	StartTime = Timer
	Do
		If Browser("GenericBrowser").WinObject("Notification bar").WinToolbar("Notification bar").Exist(1) Then
			Browser("GenericBrowser").WinObject("Notification bar").WinToolbar("Notification bar").Press "Save", micLeftBtn
			Wait(5)
			Browser("GenericBrowser").WinObject("Notification bar").WinButton("Close").Click
			Success = True
			Exit Do
		End If

		If Browser("Browser").Dialog("Windows Internet Explorer").WinButton("Save").Exist(1) Then
			Browser("Browser").Dialog("Windows Internet Explorer").WinButton("Save").Click
			Wait(1)
			Browser("GenericBrowser").WinObject("Notification bar").WinButton("Close").Click
			Success = True
			Exit Do
		End If

		If Browser("Oracle BI Interactive").WinObject("Notification bar").WinButton("Save").Exist(1) Then
			Browser("Oracle BI Interactive").WinObject("Notification bar").WinButton("Save").Click
			Wait(1)
			Browser("Oracle BI Interactive").WinObject("Notification bar").WinButton("Close").Click
			Success = True
			Exit Do
		End If


		EndTime = timer
		If (EndTime - StartTime) > Timeout Then
			Success = False
			ReportingOn
			reporter.ReportEvent micFail, "Download File", "Downloading file timed out after " & Round(EndTime - StartTime,2) & " seconds."
			ReportingOff
			ExitTestIteration
			Exit Do
		End If
	Loop Until Break
	ReportingOn
	EndTime = timer
	If Success Then
		SL = GetLatestDownload()
		If SL <> PossibleOldDL Then
			reporter.ReportEvent micPass, "Download File", "Downloaded file in " & Round(EndTime - StartTime,2) & " seconds." & ML(2) _
			& SL
		Else
			SL = ""
			reporter.ReportEvent micFail, "Could Not Download File", ""
			ExitTestIteration
		End If
		IESave = SL
	End If
	Setting("DefaultTimeOut")= "30000"
End Function

'**********************************************************************
' Function Name:CleanUp
' Purpose: Prepares a machine for test excecution
' Author: Adam Thomas
' Input: None
' Return:
' Prerequisites:
'**********************************************************************
Public Function CleanUp()
	ReportingOff
	StartTime = Timer
	SystemUtil.CloseProcessByName "EXCEL.EXE"
	If Not Browser("ALMBrowser").Exist(1) Then
		SystemUtil.CloseProcessByName "iexplore.exe"
		SystemUtil.CloseProcessByName "iexplore.exe *32"
	Else
		ShortTimeout
		For i = 0 To 10 Step 1
			Counter = Counter + 1
			Desc = "index:=" & i
			Desc1 = "text:=Windows Security"
			Desc2 = "is owned window:=True"
			Desc3 = "is child window:=False"
			Desc4 = "nativeclass:=#32770"
			Desc5 = "text:=Cancel"
			Desc5B = "text:=&Leave this page"
			Desc6 = "nativeclass:=Button"
			If Browser(Desc).Exist(1) Then
				URL = Browser(Desc).GetROProperty("openurl")
				If Instr(URL, "qcbin") < 1 Then
					On Error Resume Next
						If Browser(Desc).Dialog(Desc1,Desc2,Desc3,Desc4).WinButton(Desc5,Desc6).Exist(1) Then
							Browser(Desc).Dialog(Desc1,Desc2,Desc3,Desc4).WinButton(Desc5,Desc6).Click
						End If
						If Browser(Desc).Dialog(Desc1,Desc2,Desc3,Desc4).WinButton(Desc5B,Desc6).Exist(1) Then
							Browser(Desc).Dialog(Desc1,Desc2,Desc3,Desc4).WinButton(Desc5B,Desc6).Click
						End If
						Browser(Desc).Close
						Reporter.ReportEvent micDone, "Shut Down Browser", "Browser with open url '" & URL & "' was shut down."
					On Error GoTo 0
					i = i - 1
				End If
			Else
				Exit For
			End If
			If Counter > 11 Then
				Exit For
			End If
			EndTime = timer
			If (EndTime - StartTime) > 30 Then
				Exit For
			End If
		Next
		FailFlag = False
		FinishedTrying = False
		AllClear = False
		StartTime = Timer
		TimeOut = 90
		ReportingOn
		For i = 0 To 10 Step 1
			Counter = Counter + 1
			Desc = "index:=" & i
			If Browser(Desc).Exist(0) Then
				URL = Browser(Desc).GetROProperty("openurl")
				If Instr(URL, "qcbin") < 1 Then
					FailFlag = True
					Reporter.ReportEvent micDone, "Browser unable to close", "URL: " & URL & L & "Index: " & i
				End If
			End If
		Next
		If Not FailFlag Then
			Reporter.ReportEvent micDone, "Shut Down Browser", "Browser with open url '" & URL & "' was shut down."
		End If
		DefaultTimeout
		EndTime = timer
	End If
	DefaultTimeout
	ReportingOn
	If  Browser("CRMBrowser").Exist(1) Then
		Reporter.ReportEvent micFail, "Shutdown", "Could not shutdown all browsers."
	Else
		Reporter.ReportEvent micPass, "Shutdown", "All CRM browsers shutdown successfuly."
	End If
End Function

'**********************************************************************
' Function Name: SendKeys
' Purpose: Sends key strokes to any active window or object
' Useful Keys: {BACKSPACE}, {BS}, or {BKSP} {BREAK} {CAPSLOCK} {DELETE} or {DEL}
'	 {DOWN} {END} {ENTER} or ~{ESC} {HELP} {HOME} {INSERT} or {INS} {LEFT}
'	{NUMLOCK} {PGDN} {PGUP} {PRTSC} {RIGHT} {SCROLLLOCK} {TAB} {UP} {F1} {F2}
'	{F3} {F4} {F5} {F6} {F7} {F8} {F9} {F10} {F11} {F12} {F13} {F14} {F15} {F16}
' Author: Adam Thomas
' Input:
'	KeysToSend
' Return: None
' Prerequisites: object keystrokes are intended for MUST be activated and at the
'	top layer of the screen
'**********************************************************************
Function SendKeys(KeysToSend)
	Set WshShell = CreateObject("WScript.Shell")
	WshShell.SendKeys KeysToSend
	Set WshShell = Nothing
End Function

'**********************************************************************
' Function Name: SendKeysSlowley
' Purpose: standard send keys with a configurable delay between key strokes. Useful for AJAX controls
' Author: Adam Thomas
' Input:
'	StringToType
'	TimeBetweenKeystrokesInMiliseconds
' Return: None
' Prerequisites:
'**********************************************************************
Function SendKeysSlowley(StringToType, TimeBetweenKeystrokesInMiliseconds)
	Set WshShell = CreateObject("WScript.Shell")
	LenOfStr = Len(StringToType)
	For x = 1 to LenOfStr
		Letters = Left(StringToType, x)
		Letters = Right(Letters, 1)
		WshShell.SendKeys Letters
		Wait 0,TimeBetweenKeystrokesInMiliseconds
	Next
	Set WshShell = Nothing
End Function


'**********************************************************************
' Function Name: oDateDiff
' Purpose:
' Author: Adam Thomas
' Input:
'	DateString
' Return:
' Prerequisites:
'**********************************************************************
Function oDateDiff(DateString)
	DateString = Replace(DateString, ",", "")
	aDate = Split(DateString)
	If UBound(aDate) = 6 Then
		dtm1=aDate(1) & "-" & aDate(0) & "-" & aDate(2)
		dtm2=aDate(5) & "-" & aDate(4) & "-" & aDate(6)
		oDateDiff = DateDiff( "d",dtm1 ,dtm2)
	Else
		oDateDiff = -1
	End If
End Function

'**********************************************************************
' Function Name: UniqueNumber
' Purpose:
' Author: Adam Thomas
' Input:
'	LengthOfNumber
' Return: string
' Prerequisites:
'**********************************************************************
Function UniqueNumber(LengthOfNumber)
	Dim a,b,c,d,e,f
	Dim UN
	s = Second(Now)
	mn = Minute(Now)
	h = Hour(Now)
	d = Day(Now)
	m = Month(Now)
	y = Year(Now)
	UN = s & mn & h & d & m & y
	UniqueNumber = Left(UN, LengthOfNumber)
End Function

'**********************************************************************
' Function Name: SetFireFoxCertificates
' Purpose:
' Author: Adam Thomas
' Input:
'	CertOverrideALMResourceID'
' Return:
' Prerequisites: Yes
'**********************************************************************
Function SetFireFoxCertificates(CertOverrideALMResourceID)
	Set FileSys=CreateObject("Scripting.FileSystemObject")
	FFPath = GetUserProfilePath() & "\Application Data\Mozilla\Firefox\Profiles"
	FFExtendedPath = GetChildFolders(FFPath)
	If Ubound(FFExtendedPath) = 1 Then
		FFPath = FFPath & "\" & FFExtendedPath(0) & "\"
	Else
		FFPath = "Error"
	End If
	'Download cert override text
	CertDLPath = QCGetResource(CertOverrideALMResourceID)
	'Copy text to Firefox app data directory
	FileSys.CopyFile CertDLPath, FFPath,True
	Set FileSys=nothing
End Function

'**********************************************************************
' Function Name: OverFlowEdit
' Purpose:
' Author: Adam Thomas
' Input:
'	EditObject
'	CharacterQty
'	Message
' Return:
' Prerequisites:
'**********************************************************************
Function OverFlowEdit(EditObject,CharacterQty, Message)
	LongString = ""
	For x = 1 to CharacterQty
		max = 90
		min = 65
		Randomize
		RndNum = Int((max-min+1)*Rnd+min)
		NewChr = Chr(RndNum)
		LongString = LongString & NewChr
	Next
	BeforeLen = Len(LongString)
	EditObject.Set LongString
	AfterLen = Len(EditObject.GetROProperty("value"))
	If BeforeLen = AfterLen Then
		Reporter.ReportEvent micPass, Message, BeforeLen & " Characters entered into the edit box, " & AfterLen & " characters persisted."
		Result = True
	Else
		Reporter.ReportEvent micFail, Message, BeforeLen & " Characters entered into the edit box, " & AfterLen & " characters persisted."
		Result = False
	End If
	OverFlow = Result
End Function

'**********************************************************************
' Function Name: OverFlowEditReq
' Purpose:
' Author: Adam Thomas
' Input:
'	EditObject
'	CharacterQty
'	ReqID
'	Message
' Return: no
' Prerequisites:
'**********************************************************************
Function OverFlowEditReq(EditObject,CharacterQty, ReqID, Message)
	LongString = ""
	For x = 1 to CharacterQty
		max = 90
		min = 65
		Randomize
		RndNum = Int((max-min+1)*Rnd+min)
		NewChr = Chr(RndNum)
		LongString = LongString & NewChr
	Next
	BeforeLen = Len(LongString)
	EditObject.Set LongString
	AfterLen = Len(EditObject.GetROProperty("value"))
	If BeforeLen = AfterLen Then
		ValidateRequirement "Passed", Message, BeforeLen & " Characters entered into the edit box, " & AfterLen & " characters persisted.", ReqID
		Result = True
	Else
		ValidateRequirement "Failed", Message, BeforeLen & " Characters entered into the edit box, " & AfterLen & " characters persisted.", ReqID
		Result = False
	End If
	OverFlow = Result
End Function

'**********************************************************************
' Function Name: L
' Purpose: Adds a new line. To be used with the reporter.
' Author: Adam Thomas
' Input:None
' Return: String
' Prerequisites: None
'**********************************************************************
Function L()
	 L = chr(13) & chr(10)
End Function

'**********************************************************************
' Function Name: ML
' Purpose: Adds multiple new lines. To be used with the reporter.
' Author: Adam Thomas
' Input:
'	NumberOfLines
' Return:
' Prerequisites:
'**********************************************************************
Function ML(NumberOfLines)
	For n = 1 to NumberOfLines
		 nl = nl & chr(13) & chr(10)
	Next
	ML = nl
End Function

'**********************************************************************
' Function Name: RegExCleaner
' Purpose: Clears a string of any regular expression characters
' Author: Adam Thomas
' Input:
'	StringToClean
' Return: string
' Prerequisites:
'**********************************************************************
Function RegExCleaner(StringToClean)
	aSpecialChars = Split("[ \ ^ $ | ? + ( ) { }")
	For Each SpecialChar in aSpecialChars
		StringToClean = Replace(StringToClean, SpecialChar, ".*")
	Next
	RegExCleaner = StringToClean
End Function

'**********************************************************************
' Function Name: UpdateTestPlanField
' Purpose: Unknown
' Author: Adam Thomas
' Input:
'	StrStatus
' Return:
' Prerequisites:
'**********************************************************************
Sub UpdateStatus(StrStatus)
	On Error Resume Next
		QCUtil.CurrentTest.Field("TS_USER_TEMPLATE_02") = StrStatus
		QCUtil.CurrentTest.Post
		Reporter.ReportEvent  micDone, "TP Table Environment Field update succeed","TP Table Environment Field update successful with status " & StrStatus
	On Error GoTo 0
End Sub

'**********************************************************************
' Function Name: FindUIColumn
' Purpose: Finds column number with a given column name
' Author: Adam Thomas
' Input:
'	HeaderRow
'	TableObject
'	ColumnName
' Return: integer OF THE COLUMN
' Prerequisites:
'**********************************************************************
Function FindUIColumn(TableObject, ColumnName, HeaderRow)
	FoundFlag = False
	ColCount = TableObject.ColumnCount(HeaderRow)

	For c = 0 to ColCount
		CurrentCol = TableObject.GetCellData(HeaderRow,c)
		If UCase(CurrentCol) = UCase(ColumnName) Then
			FoundFlag = True
			Exit For
		End If
	Next

	If FoundFlag Then
		FindUIColumn = c
	Else
		FindUIColumn = -1
	End If

End Function

'**********************************************************************
' Function Name: TableSignature
' Purpose: Returns a string representing the state of a table.
' Author: Adam Thomas
' Input:
'	TableObject
'	ColumnRow 	string
' Return: 	string
' Prerequisites:
'**********************************************************************
Function TableSignature(TableObject, ColumnRow)
	On Error Resume Next
		ColCount = TableObject.ColumnCount(ColumnRow)
		RowCount = TableObject.RowCount
		For r = 1 to RowCount
			For c = 1 to ColCount
				TableSig = TableSig & "~" & TableObject.GetCellData(r,c)
			Next
		Next
	On Error GoTo 0
	TableSignature = TableSig
End Function

'**********************************************************************
' Function Name: TimeStamp
' Purpose: Converts date time string to an acceptable format for file systems
' Author: Adam Thomas
' Input: None
' Return: string
' Prerequisites:
'**********************************************************************
Function TimeStamp()
	MyTime = Now()
	MyTime = Replace(MyTime, "/", "-")
	MyTime = Replace(MyTime, ":", "-")
	TimeStamp = MyTime
End Function

'**********************************************************************
' Function Name: CreateReportWithScreenShot
' Purpose: 	creates QTP/UFT reporter message with screenshot of system
' Author: Adam Thomas
' Input:
'	PassFailDoneOrWarning
'	StepName
'	Details
' Return: none
' Prerequisites:
'	DeleteFileByPath
'**********************************************************************
Function CreateReportWithScreenShot(PassFailDoneOrWarning,StepName,Details)
	TF = CreateTempFolder("C:\Temp\UFT\")
	TF = TF  & "crash.bmp"
	Desktop.CaptureBitmap TF, true
	Select Case UCase(PassFailDoneOrWarning)
		Case "PASS", "P", "MICPASS"
			Reporter.ReportEvent micPass, StepName, Details, TF
		Case "FAIL", "F", "MICFAIL"
			Reporter.ReportEvent micFail, StepName, Details, TF
		Case "DONE", "D", "MICDONE"
			Reporter.ReportEvent micDone, StepName, Details, TF
		Case "WARNING", "WARN", "W", "MICWARN"
			Reporter.ReportEvent micWarning, StepName, Details, TF
	End Select
	DeleteFileByPath(TF)
End Function

'**********************************************************************
' Function Name: GetUserEV
' Purpose:Get and return Environment Variable
' Author: Adam Thomas
' Input:
'	EnvironmentalVariableName'
' Return: string
' Prerequisites:
'**********************************************************************
Function GetUserEV(EnvironmentalVariableName)
	Set objWSH =  CreateObject("WScript.Shell")
	Set objUserVariables = objWSH.Environment("USER")
	GetUserEV = objUserVariables(EnvironmentalVariableName)
	Set objUserVariables = nothing
	Set objWSH =  nothing
End Function

'**********************************************************************
' Function Name: SetUserEV
' Purpose: Changes Environment Variable
' Author: Adam Thomas Changes Environment Variable
' Input:
'	EnvironmentalVariableName
'	Value
' Return: None
' Prerequisites:
'**********************************************************************
Function SetUserEV(EnvironmentalVariableName, Value)
	Set objWSH =  CreateObject("WScript.Shell")
	Set objUserVariables = objWSH.Environment("USER")
	objUserVariables(EnvironmentalVariableName) = Value
	Set objUserVariables = nothing
	Set objWSH =  nothing
End Function

'**********************************************************************
' Function Name: ReturnTextFileText
' Purpose:  Reads and returnes text in file provided.
' Author: Adam Thomas
' Input:
'	TxtFilePath'
' Return: string
' Prerequisites:
'**********************************************************************
Function ReturnTextFileText(TxtFilePath)
	Set objFileToRead = CreateObject("Scripting.FileSystemObject").OpenTextFile(TxtFilePath,1)
	ReturnTextFileText = objFileToRead.ReadAll()
	objFileToRead.Close
	Set objFileToRead = Nothing
End Function

'**********************************************************************
' Function Name:
' Purpose: Creates a random string at a given length. Uses random methods. For time based methods, use function RandomString
' Author: Adam Thomas
' Input:
'	LengthOfStrimg
' Return: string
' Prerequisites: none
'**********************************************************************
Function RndString(LengthOfStrimg)
	LongString = ""
	For x = 1 to LengthOfStrimg
		max = 90
		min = 65
		Randomize
		RndNum = Int((max-min+1)*Rnd+min)
		NewChr = Chr(RndNum)
		LongString = LongString & NewChr
	Next
	RndString = LongString
End Function


'**********************************************************************
' Function Name: encrypt
' Purpose: encrypts a string
'Encryption Example
'	temp = "MyPassword"
' 	key = "myrandomkey"
'
'	Before = Encrypt(temp,key)
'	MSGBOX Before
' 	After = Decrypt(Before,key)
' 	MSGBOX After
' Author: Unknown
' Input:
'	key
'	Str
' Return: string
' Prerequisites:
'**********************************************************************
Function encrypt(Str, key)
	'Dim lenKey, KeyPos, LenStr, x, Newstr
	origionalStringLength = Len(str)
	BeforeSetLength = 15 - origionalStringLength
	BeforeSet = RandomString(BeforeSetLength)
	AfterSet = RandomString(15)
	Str = BeforeSet & "~" & Str & "~" & AfterSet
	Newstr = ""
	lenKey = Len(key)
	KeyPos = 1
	LenStr = Len(Str)
	str = StrReverse(str)
	For x = 1 To LenStr
		Newstr = Newstr & (chr(asc(Mid(str,x,1))+Asc(Mid(key,KeyPos,1))))
		KeyPos = keypos+1
		If KeyPos > lenKey Then KeyPos = 1
	Next
	encrypt = Newstr
End Function

'**********************************************************************
' Function Name: Decrypt
' Purpose:
' Author: Unknown
' Input:
'	str
'	key String
' Return: String
' Prerequisites:
'**********************************************************************
Function Decrypt(str,key)
	Dim lenKey, KeyPos, LenStr, x, Newstr

	Newstr = ""
	lenKey = Len(key)
	KeyPos = 1
	LenStr = Len(Str)

	str=StrReverse(str)
	For x = LenStr To 1 Step -1
		Newstr = Newstr & (chr(asc(Mid(str,x,1))-Asc(Mid(key,KeyPos,1))))
		KeyPos = KeyPos+1
		If KeyPos > lenKey Then KeyPos = 1
	Next
	Newstr=StrReverse(Newstr)
	Decrypt = Split(Newstr, "~")(1)
End Function

'**********************************************************************
' Function Name: GenericWaitForLoad
' Purpose: Waits for object image to be not visible
' Author: Adam Thomas
' Input:
'	TimeoutInSeconds
'	LoadingIconObject
' Return: none
' Prerequisites:
'**********************************************************************
Function GenericWaitForLoad(TimeoutInSeconds, LoadingIconObject)
	ReportLoaded = False
	Setting("DefaultLoadTime ")= "1000"
	StartTime = timer
	For t = 1 To TimeoutInSeconds Step 1
		If LoadingIconObject.Exist(2) Then
			If LoadingIconObject.GetROProperty("visible") = "False" Then
				ReportLoaded = True
				Exit For
			End If
		Else
			ReportLoaded = True
			Exit For
		End If
		EndTime = timer
		If (EndTime - StartTime) > TimeoutInSeconds Then
			ExitFor
		End If
		Wait(1)
	Next

	If ReportLoaded Then
		reporter.ReportEvent micPass, "Waiting for page to load", "Loading finished after " & Round(EndTime - StartTime,2) & " seconds."
	Else
		reporter.ReportEvent micPass, "Waiting for page to load", "Loading timed out after " & Round(EndTime - StartTime,2) & " seconds."
	End If
End Function

'**********************************************************************
' Function Name: CheckZero
' Purpose:
' Author: Adam Thomas
' Input:
' StringInQuestion'
' Return: Boolean
' Prerequisites:
'**********************************************************************
Function CheckZero(StringInQuestion)
	AllClear = True
	StrLen = Len(StringInQuestion)
	If StrLen = 0 Then
		AllClear = False
	End If
	For s = 1 To StrLen Step 1
		Ch = Mid(StringInQuestion,s,1)
		If Ch = "." or Ch = "0" Then
		Else
		AllClear = False
		End If
	Next
	CheckZero = AllClear
End Function


'**********************************************************************
' Function Name: Percentage
' Purpose:
' Author: Adam Thomas
' Input:
'	Part
'	Total
' Return: string og Percentage
' Prerequisites:
'**********************************************************************
Function Percentage(Part, Total)
	If CInt(Total) = 0 Then
		Perc = "Cannot divide by zero."
	Else
		If CInt(Part) = 0 Then
			Perc = "0%"
		Else
			OrgPerc = Part/Total
			If OrgPerc = 1 Then
				Perc = "100%"
			Else
				If InStr(CStr(OrgPerc), "E-") > 0 Then
					SN = Split(OrgPerc, "E-")(1)
					PreDec = Split(OrgPerc, ".")(0)
					PostDec = Replace(Split(OrgPerc, ".")(1), "E-" & SN, "")
					'Rounded = Round((PreDec & "." & PostDec),0)
					ModPostDeck = Left(PostDec, 2)


					For z = 1 To CInt(SN) - 1 Step 1
						Zeros = Zeros & "0"
					Next
					P = Zeros & PreDec & ModPostDeck

					Le = Left(P, 2)
					R = Right(p, Len(P) - 2)

					Perc = Le & "." & R & "%"


				Else
					PreDec = Left(Split((Part/Total), ".")(1),2)
					PostDec = Right(Split((Part/Total), ".")(1),Len(Split((Part/Total), ".")(1)) - 2)
					Perc = Round((PreDec & "." & PostDec),1) & "%"
				End If
			End If
		End If
	End If
	Percentage = Perc
End Function

'**********************************************************************
' Function Name: CleanNumber
' Purpose: strips dollar and comma symbols from string
' Author: Adam Thomas
' Input:
'	NumbertoClean'
' Return: string
' Prerequisites:
'**********************************************************************
Function CleanNumber(NumbertoClean)
	NumbertoClean = Replace(NumbertoClean, "$", "")
	For x = 1 To 10 Step 1
		NumbertoClean = Replace(NumbertoClean, ",", "")
	Next
	CleanNumber = NumbertoClean
End Function

'**********************************************************************
' Function Name: CountFileLines
' Purpose: Counts counts lines of file from file path passed.
' Author: Adam Thomas
' Input:
'	FilePath
' Return: integer
' Prerequisites:
'**********************************************************************
Function CountFileLines(FilePath)
	Dim objFSO, txsInput, strTemp, arrLines
	Const ForReading = 1
	Set objFSO = CreateObject("Scripting.FileSystemObject")


	Set txsInput = objFSO.OpenTextFile(FilePath, ForReading)

	'Skip lines one by one
	Do While txsInput.AtEndOfStream <> True
	    txsInput.SkipLine ' or strTemp = txsInput.ReadLine
	Loop

	CountFileLines = txsInput.Line-1

	'Cleanup
	Set objFSO = Nothing
End Function

'**********************************************************************
' Function Name: LoadBar
' Purpose:
' Author:Perry Thomas
' Input:
'	OnOffSwitch
'	BarTitle
'	MaxSteps
' Return:
' Prerequisites:
'**********************************************************************
Public Function LoadBar(OnOffSwitch,BarTitle,MaxSteps)
	'Select on or off switch
	Select Case Ucase(OnOffSwitch)
		Case "ON"
			'Set objects to QTP variables
			Set MyForm = DotNetFactory.CreateInstance("System.Windows.Forms.Form", "System.Windows.Forms")
			Set MyProgressBar = DotNetFactory.CreateInstance("System.Windows.Forms.ProgressBar", "System.Windows.Forms")
			Set BarLabel = DotNetFactory.CreateInstance("System.Windows.Forms.Label", "System.Windows.Forms")
			Set Pos = DotNetFactory.CreateInstance("System.Drawing.Point", "System.Drawing")
			Set oAlign = DotNetFactory.CreateInstance("System.Drawing.ContentAlignment", "System.Drawing")

			'Define Bar Position
			With Pos
				.X = 30
				.Y = 15
			End With

			'Define progress bar
			With MyProgressBar
				.Location = Pos
				.Maximum = MaxSteps
				.Minimum = 0
				.Step = 1
				.Height = 25
				.Width = 425
			End With

			'Define Label Position
			With Pos
				.X = 20
				.Y = 45
			End With

			With BarLabel
				.Text = BarTitle
				.Location = Pos
				.TextAlign = oAlign.MiddleCenter
				.Width = 425
				.Height = 15
			End With

			'Create .NET UI
			With MyForm
				.Text = "Working... Please Wait"
				.Height = 125
				.Width = 500
				.Controls.Add MyProgressBar
				.Controls.Add BarLabel
				.TopMost = True
			End With

			'Turn on progress bar
			MyForm.Show
			Environment("MyForm") = MyForm
			Environment("LoadBar") = MyProgressBar

		Case "OFF"
			Set MyForm = Environment("MyForm")
			MyForm.Close
	End Select
End Function

'**********************************************************************
' Function Name: LoadStep
' Purpose:
' Author:Perry Thomas
' Input:
' Return:
' Prerequisites:
'**********************************************************************
Public Function LoadStep
	Set MyForm = Environment("MyForm")
	Set MyProgressBar = Environment("LoadBar")

	If MyProgressBar.Value <> MyProgressBar.Maximum Then
		MyProgressBar.PerformStep()
	Else
		MyForm.Close
		MyProgressBar.Value = 0
	End If
End Function

'**********************************************************************
' Function Name: SelectFromDropDown
' Purpose:
' Author: Adam Thomas
' Input:
'	DropDownObject
'	TextToSelect
' Return: none
' Prerequisites:
'**********************************************************************
Function SelectFromDropDown(DropDownObject, TextToSelect)
	Set DDO = DropDownObject
	aList = Split(DDO.GetROProperty("all items"), ";")

	For i = 0 To Ubound(aList) Step 1
		If TextToSelect = "<BLANK>" Then
			If ASC(aList(i)) = 160 or ASC(aList(i)) = 32 Then
				DDO.Select i
			End If
		Else
			If Trim(UCase(aList(i))) = Trim(UCase(TextToSelect)) Then
				DDO.Select i
			End If
		End If
	Next
End Function

'**********************************************************************
' Function Name: ReportingOff
' Purpose:
' Author: Adam Thomas
' Input: none
' Return: non3
' Prerequisites:
'**********************************************************************
Function ReportingOff()
	On Error Resume Next
	Reporter.Filter = 3
End Function

'**********************************************************************
' Function Name: ReportingOn
' Purpose:
' Author: Adam Thomas
' Input: None
' Return: None
' Prerequisites:
'**********************************************************************
Function ReportingOn()
	On Error GoTo 0
	Reporter.Filter = 0
End Function

'**********************************************************************
' Function Name: DefaultTimeout
' Purpose:
' Author: Adam Thomas
' Input:
' Return:
' Prerequisites:
'**********************************************************************
Function DefaultTimeout()
	If Environment.Value("TO") <>"" Then
		Setting("DefaultTimeOut")= Environment.Value("TO")
	Else
		Setting("DefaultTimeOut")= "30000"
	End If
End Function

'**********************************************************************
' Function Name: ShortTimeout
' Purpose:
' Author: Adam Thomas
' Input: None
' Return: None
' Prerequisites: None
'**********************************************************************
Function ShortTimeout()
	Def = Setting("DefaultTimeOut")
	Setting("DefaultTimeOut")= "500"
	Environment.Value("TO") = Def
	ShortTimeout = Def
End Function

'**********************************************************************
' Function Name: IsInArray
' Purpose:
' Author: Adam Thomas
' Input:
'	ArrayName
'	SearchString
' Return:
' Prerequisites:
'**********************************************************************
Function IsInArray(ArrayName,SearchString)
	FoundString = False
	For Each Node In ArrayName
		If Node = SearchString Then
			FoundString = True
		End If
	Next
	IsInArray = FoundString
End Function

'**********************************************************************
' Function Name: DeleteFromArray
' Purpose:
' Author: Adam Thomas
' Input:
'	ArrayName
'	TextToDelete
' Return: Array
' Prerequisites:
'**********************************************************************
Function DeleteFromArray(ArrayName, TextToDelete)
	AllText = ""
	For Each Node In ArrayName
		If Node <> TextToDelete Then
			AllText = AllText & "|||" & Node
		End If
	Next
	AllText = Right(AllText, Len(AllText) - 3)
	DeleteFromArray = Split(AllText, "|||")
End Function

'**********************************************************************
' Function Name:ET
' Purpose: Unknown
' Author: Adam Thomas
' Input: none
' Return: none
' Prerequisites:
'	methods:
'		ExitTestIteration
'		CleanUp
'**********************************************************************
Function ET
	CleanUp
	ExitTestIteration
End Function

'**********************************************************************
' Function Name: CleanRecovery
' Purpose: Unknown
' Author: Adam Thomas
' Input:
'	Object'
' Return:
' Prerequisites:
'**********************************************************************
Function CleanRecovery(Object)

End Function

'**********************************************************************
' Function Name:
' Purpose: returns text from clipboard. Can negatively effect ALM reporting
'	on some versions.
' Author: Adam Thomas
' Input: None
' Return: None
' Prerequisites:
'**********************************************************************
Function GetClipBoardText()

	Set objHTML = CreateObject("htmlfile")
	GetClipBoardText = objHTML.ParentWindow.ClipboardData.GetData("text")
	objHTML.close
	Set objHTML = Nothing


	'Set objIE = CreateObject("InternetExplorer.Application")
	' objIE.Navigate("about:blank")
	' GetClipBoardText = objIE.document.parentwindow.clipboardData.GetData("text")
	' objIE.Quit
End Function

'**********************************************************************
' Function Name: GetWebEditValue
' Purpose: Returns a Web Edit's current value.
' Author:Brian Buckhana
' Input:
'	WebEditObject'
' Return: string
' Prerequisites: none
'**********************************************************************
Function GetWebEditValue(WebEditObject)
	GetWebEditValue = WebEditObject.GetROProperty("value")
End Function

'**********************************************************************
' Function Name: GetWebListValue
' Purpose: Returns a Web List's current value.
' Author: Brian Buckhana
' Input:
'	WebListObject
' Return: string
' Prerequisites: none
'**********************************************************************
Function GetWebListValue(WebListObject)
	GetWebListValue = WebListObject.GetROProperty("value")
End Function

'**********************************************************************
' Function Name: GetCheckboxValue
' Purpose: Returns a Web Checkbox's current value.
' Author:Brian Buckhana
' Input:
'	CheckboxObject'
' Return: string
' Prerequisites: None
'**********************************************************************
Function GetCheckboxValue(CheckboxObject)
	GetCheckboxValue = CheckboxObject.GetROProperty("checked")
End Function

'**********************************************************************
' Function Name: GetWebElementValue
' Purpose: Returns a Web Element's current value.
' Author:Brian Buckhana
' Input:
'	 WebElementObject'
' Return: string
' Prerequisites: None
'**********************************************************************
Function GetWebElementValue(WebElementObject)
	GetWebElementValue = WebElementObject.GetROProperty("innertext")
End Function

'**********************************************************************
' Function Name: GetWebRadioGroupValue
' Purpose: Returns a Web Radio Group's current value.
' Author: Brian Buckhana
' Input:
'	WebRadioGroup'
' Return: string
' Prerequisites: None
'**********************************************************************
Function GetWebRadioGroupValue(WebRadioGroup)
	GetWebRadioGroupValue = WebRadioGroupObject.GetROProperty("value")
End Function

'**********************************************************************
' Function Name: SetCheckbox
' Purpose: Sets a checkbox to checked or not checked based on parameter data. Blank parameter is not checked, and any 'select' key work will select it.
' Author: Adam Thomas
' Input:
'	CheckBoxObject
'	Parameter
' Return: None
' Prerequisites: None
'**********************************************************************
Function SetCheckbox(CheckBoxObject, Parameter)
	If Parameter <> "" Then
		Select Case UCase(Parameter)
			Case "ON", "SELECT", "SELECTED", "CHECK", "CHECKED", TRUE, "TRUE"
				CheckBoxObject.Set "ON"
			Case Else
				CheckBoxObject.Set "OFF"
		End Select
	End If
End Function

'**********************************************************************
' Function Name:SetWebRadioGroup
' Purpose: Sets a web radio group based on parameter data.
' Author:Brian Buckhana
' Input:
'	WebRadioGroupObject
'	Parameter
' Return: None
' Prerequisites: None
'**********************************************************************
Function SetWebRadioGroup(WebRadioGroupObject, Parameter)
	If Parameter <> "" Then
		Select Case UCase(Parameter)
			Case "ON", "YES", "SELECT", "SELECTED", "CHECK", "CHECKED", TRUE, "TRUE", "1"
				WebRadioGroupObject.Select "1"
			Case Else
				WebRadioGroupObject.Select "0"
		End Select
	End If
End Function

'**********************************************************************
' Function Name: RandomString
' Purpose: Returns a truely unique string of all caps characters
' Author: Adam Thomas
' Input: None
' Return: None
' Prerequisites: None
'**********************************************************************
Function RandomString()

	S = Second(Now)
	MN = Minute(Now)
	H = Hour(Now)
	D = Day(Now)
	M = Month(Now)
	Y = Year(Now)
	UN = S & MN & H & D & M & Y

	UNLen = Len(UN)

	For c = 1 To UNLen Step 1
		CurNum = Mid(UN, c, 1)
		NewChr = Chr(65 + CurNum)
		LongString = LongString & NewChr
	Next

	RandomString = LongString

End Function

'**********************************************************************
' Function Name: RandomSS
' Purpose: Returns a unique social security number. Does not comply with all SS rules
' Author: Adam Thomas
' Input: None
' Return: string
' Prerequisites: None
'**********************************************************************
Function RandomSS()
	S = Second(Now)
	MN = Minute(Now)
	H = Hour(Now)
	D = Day(Now)
	M = Month(Now)
	Y = Year(Now)
	UN = S & MN & H & D & M & Y

	RandomSS = Left(UN, 9)

End Function

'**********************************************************************
' Function Name: SetWebEdit
' Purpose: Sets a webedit to a value if parameter has data. Blank parameter will skip the web edit all together
' Author: Adam Thomas
' Modfied By: Brian Buckhana
' Input:
'	WebEditObject
'	Parameter
' Return: none
' Prerequisites: none
'**********************************************************************
Function SetWebEdit(WebEditObject, Parameter)
	Set oWE = WebEditObject

	If UCase(Parameter) = "<RANDOM>" Then
		Parameter = "TestID" & RDS()
	End If

	If UCase(Parameter) = "<RANDOM_SSN>" or UCase(Parameter) = "<RANDOMSSN>" or UCase(Parameter) = "<RANDOMSS>" or UCase(Parameter) = "<RANDOM_SS>" Then
		Parameter = CStr(RSS())
	End If


	If Parameter <> "" Then
		If oWE.Exist(3) Then
			If uCase(Parameter) = "<NULL>" xOR uCase(Parameter) = "<BLANK>" Then
				oWE.Set ""
			Else
				oWE.Set Parameter
			End If
		End If
	End If
End Function


'**********************************************************************
' Function Name: SetWebElement
' Purpose:
'Modfied By: Brian Buckhana
' Author: Adam Thomas
' Input:
'	WebElementObject
'	Parameter
' Return: none
' Prerequisites:
'	Methods:
'		SendKeys
'**********************************************************************
Function SetWebElement(WebElementObject, Parameter)
	Set oWE = WebElementObject

	If UCase(Parameter) = "<RANDOM>" Then
		Parameter = "TestID" & RDS()
	End If

	If UCase(Parameter) = "<RANDOM_SSN>" or UCase(Parameter) = "<RANDOMSSN>" or UCase(Parameter) = "<RANDOMSS>" or UCase(Parameter) = "<RANDOM_SS>" Then
		Parameter = CStr(RSS())
	End If


	If Parameter <> "" Then
		If oWE.Exist(3) Then
			oWE.click
			Wait 0,500
			SendKeys(Parameter)
		End If
	End If
End Function

'**********************************************************************
' Function Name: SetWebList
' Purpose: Sets a weblist to a value if parameter has data. Blank parameter will skip the web list all together
' Author: Adam Thomas
' Input:
'	WebListObject
'	Parameter
' Return: none
' Prerequisites: none
'**********************************************************************
Function SetWebList(WebListObject, Parameter)
	Set oWL = WebListObject

	If Parameter <> "" Then
		WEDisabled = oWL.GetROProperty("disabled")
		WEID = oWL.GetROProperty("html id")

		If WEDisabled Then
			Reporter.ReportEvent micFail, "Object Disabled", "The web list object was disabled." & ML(2) & "Input Data: " & Parameter & ML(2) _
			& "Web list HTML ID: " & WEID
		Else
			oWL.select Parameter
		End If

	End If
End Function

'**********************************************************************
' Function Name: VerifyObjectEnabled
' Purpose: Verifies if an object is enabled/disabled and reports back this status.
' Author: Brian Buckhana
' Input:
'	WebObject
'	ObjectType
'	ExpectedEnablement
' Return: Setting
' Prerequisites: nona
'**********************************************************************
Function VerifyObjectEnabled(WebObject, ObjectType, ExpectedEnablement)
	Set object = WebObject
'	enabled = object.GetROProperty("disabled")
	enabled = object.VerifyEnable

	Select Case UCase(ExpectedEnablement)
		Case "TRUE", True, "ON", "ENABLED"
			If enabled Then
				Reporter.ReportEvent micPass, "Verify " &ObjectType& " is Enabled", "Object is enabled."
			Else
				Reporter.ReportEvent micFail, "Verify " &ObjectType& " is Enabled", "Object is disabled."
			End If
		Case "FALSE", False, "OFF", "DISABLED"
			If enabled Then
				Reporter.ReportEvent micPass, "Verify " &ObjectType& " is Enabled", "Object is disabled."
			Else
				Reporter.ReportEvent micFail, "Verify " &ObjectType& " is Enabled", "Object is enabled."
			End If
		Case Else
			Reporter.ReportEvent micFail, "Verify Object Enabled Parameter Error", "Wrong parameter: " &ExpectedEnablement
	End Select

	VerifyObjectEnabled = enabled

End Function

'**********************************************************************
' Function Name: ParameterValue
' Purpose:
' Author: Adam Thomas
' Input:
'	ParameterText
' Return: string
' Prerequisites: none
'**********************************************************************
Function ParameterValue(ParameterText)
	If ParameterText <> "" Then
		ParameterValue = Split(ParameterText, "#")(0)
	Else
		ParameterValue = ""
	End If
End Function

'**********************************************************************
' Function Name: ParameterDescription
' Purpose:
' Author: Adam Thomas
' Input:
'	ParameterText
'	DefaultDescription
' Return: string
' Prerequisites: none
'**********************************************************************
Function ParameterDescription(ParameterText, DefaultDescription)
	If ParameterText <> "" Then
		If UBound(Split(ParameterText, "#")) = 1 Then
			ParameterDescription = Split(ParameterText, "#")(1)
		Else
			ParameterDescription = DefaultDescription
		End If
	Else
		ParameterDescription = DefaultDescription
	End If

End Function

'**********************************************************************
' Function Name: VerifyCheckbox
' Purpose: Verifies a checkbox to whether it is checked or not checked based on parameter data.
' Modfied By: Brian Buckhana
'  Author:Adley Haywood
' Input:
'	CheckBoxObject
'	Parameter
' Return: none
' Prerequisites: None
'**********************************************************************
Function VerifyCheckbox(CheckBoxObject, Parameter)
	Dim stringLength
	Dim Verify
	Set CB = CheckBoxObject

'	HID = CB.GetROProperty("html id")

	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(CheckBoxObject, 5, ParameterDescription(Parameter,"Checkbox")) Then
		' Do nothing at the moment.
	Else
		' Exit the function maybe?
	End If

	Parameter = ParameterValue(Parameter)

	If Parameter <> "" Then
		HID = CB.GetROProperty("html id")
		Verify = CB.GetROProperty("checked")
		stringLength = len(Parameter)
		' Check for keywords; EX: <NULL>
		If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
			Select Case UCase(Verify)
			Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " ", "0", 0
				Reporter.ReportEvent micPass, "Verify Checkbox '" & HID & "' is <NULL>", "The Checkbox has the value of <NULL>."
			Case Else
				Reporter.ReportEvent micFail, "Verify Checkbox '" & HID & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
			End Select
		Else

				Select Case UCase(Parameter)
					Case "UNSELECTED", "UNCHECKED", "NO", "OFF", False, "FALSE"
						If Verify = "1" Then
							Reporter.ReportEvent micPass, "Verify Checkbox '" & HID & "'", "The checkbox object was not checked."
						Else
							Reporter.ReportEvent micFail, "Verify Checkbox '" & HID & "'", "The checkbox object was checked."
						End If
					Case "SELECTED", "CHECKED", "YES", "ON", True, "TRUE"
						If Verify = "0" Then
							Reporter.ReportEvent micPass, "Verify Checkbox '" & HID & "'", "The checkbox object was checked."
						Else
							 Reporter.ReportEvent micFail, "Verify Checkbox '" & HID & "'", "The checkbox object was not checked."
						End If
					Case Else
						Reporter.ReportEvent micFail, "Parameter Error '" & HID & "'", "The appropriate parameters are 'Selected','Checked','Unselected' and 'Unchecked', 'On' and 'Off'."
				End Select

		End If
	End If
End Function

'**********************************************************************
' Function Name: erifyCheckboxReverse
' Purpose:
' Author: Adam Thomas
' Input:
'	CheckBoxObject
'	Parameter
' Return: none
' Prerequisites:
'	methods:
'		ParameterDescription
''		ParameterValue

'**********************************************************************
Function VerifyCheckboxReverse(CheckBoxObject, Parameter)
	Dim stringLength
	Dim Verify
	Set CB = CheckBoxObject


'	HID = CB.GetROProperty("html id")

	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(CheckBoxObject, 5, ParameterDescription(Parameter,"Checkbox")) Then
		' Do nothing at the moment.
	Else
		' Exit the function maybe?
	End If

	Parameter = ParameterValue(Parameter)

	If Parameter <> "" Then
		HID = CB.GetROProperty("html id")
		Verify = CB.GetROProperty("checked")
		stringLength = len(Parameter)
		' Check for keywords; EX: <NULL>
		If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
			Select Case UCase(Verify)
			Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " ", "0", 0
				Reporter.ReportEvent micPass, "Verify Checkbox '" & HID & "' is <NULL>", "The Checkbox has the value of <NULL>."
			Case Else
				Reporter.ReportEvent micFail, "Verify Checkbox '" & HID & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
			End Select
		Else

				Select Case UCase(Parameter)
					Case "UNSELECTED", "UNCHECKED", "NO", "OFF", False, "FALSE"
						If Verify = "0" Then
							Reporter.ReportEvent micPass, "Verify Checkbox '" & HID & "'", "The checkbox object was not checked."
						Else
							Reporter.ReportEvent micFail, "Verify Checkbox '" & HID & "'", "The checkbox object was checked."
						End If
					Case "SELECTED", "CHECKED", "YES", "ON", True, "TRUE"
						If Verify = "1" Then
							Reporter.ReportEvent micPass, "Verify Checkbox '" & HID & "'", "The checkbox object was checked."
						Else
							 Reporter.ReportEvent micFail, "Verify Checkbox '" & HID & "'", "The checkbox object was not checked."
						End If
					Case Else
						Reporter.ReportEvent micFail, "Parameter Error '" & HID & "'", "The appropriate parameters are 'Selected','Checked','Unselected' and 'Unchecked', 'On' and 'Off'."
				End Select

		End If
	End If
End Function

'**********************************************************************
' Function Name: VerifyWebEdit
' Purpose: Verifies a webedit has the value of parameter passed in.
'Modfied By: Brian Buckhana
' Author:Adley Haywood
' Input:
'	WebEditObject
'	Parameter
' Return: None
' Prerequisites:
'	methods:
'		ParameterDescription
''		ParameterValue
'**********************************************************************
Function VerifyWebEdit(WebEditObject, Parameter)
	Dim stringLength
	Dim Verify

	Set oWE = WebEditObject
'	HID = oWE.GetROProperty("html id")

	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(WebEditObject, 5, ParameterDescription(Parameter,"Web Edit")) Then
		' Do nothing.
	Else
		' Exit the function maybe?
	End If

	Parameter = ParameterValue(Parameter)

	If UCase(Parameter) = "<DNC>" or UCase(Parameter) = "<DONOTCALL>" or UCase(Parameter) = "<DO_NOT_CALL>" Then
		StyleProp = oWE.GetROProperty("outerhtml")
		If InStr(StyleProp, "color: red") > 0 Then
			Reporter.ReportEvent micPass, "Do Not Call","The number " & oWE.GetROProperty("value") & " was marked red to denote 'do not call'"
		Else
			Reporter.ReportEvent micFail, "Do Not Call","The number " & oWE.GetROProperty("value") & " was not marked red to denote 'do not call'"
		End If
	Else
		If Parameter <> "" Then
			HID = oWE.GetROProperty("html id")
			Verify = oWE.GetROProperty("value")
			stringLength = len(Parameter)
			' Check for keywords; EX: <NULL>
			If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
				Select Case UCase(Verify)
				Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " "
					Reporter.ReportEvent micPass, "Verify WebEdit '" & HID & "' is <NULL>", "The WebEdit has the value of <NULL>."
				Case Else
					Reporter.ReportEvent micFail, "Verify WebEdit '" & HID & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
				End Select
			ElseIf Trim(uCase(Verify)) = Trim(uCase(Parameter)) AND mid(Verify, 1, 1) <> "<" Then
				Reporter.ReportEvent micPass, "Verify WebEdit '" & HID & "'", "The WebEdit has the value of -" &Parameter& "-."
			Else
				Reporter.ReportEvent micFail, "Verify WebEdit '" & HID & "'", "The WebEdit does not have the value of -" &Parameter& "-."
			End If
		End If
	End If
End Function

'**********************************************************************
' Function Name: VerifyVarText
' Purpose:
' Author: Adam Thomas
' Input:
'	TextVariable
'	Parameter
' Return:
' Prerequisites:
'	methods:
'		ParameterDescription
'		ParameterValue
'**********************************************************************
Function VerifyVarText(TextVariable, Parameter)
	Dim stringLength
	Dim Verify

	Desc = ParameterDescription(Parameter,"Plain Text")
	Parameter = ParameterValue(Parameter)

	If Parameter <> "" Then
		'HID = oWE.GetROProperty("html id")
		Verify = TextVariable
		stringLength = len(Parameter)
		' Check for keywords; EX: <NULL>
		If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
			Select Case UCase(Verify)
			Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " "
				Reporter.ReportEvent micPass, "Verify Text '" & Desc & "' is <NULL>", "The WebEdit has the value of <NULL>."
			Case Else
				Reporter.ReportEvent micFail, "Verify Text '" & Desc & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
			End Select
		ElseIf Trim(uCase(Verify)) = Trim(uCase(Parameter)) AND mid(Verify, 1, 1) <> "<" Then
			Reporter.ReportEvent micPass, "Verify Text '" & Desc & "'", "The WebEdit has the value of -" &Parameter& "-."
		Else
			Reporter.ReportEvent micFail, "Verify Text '" & Desc & "'", "The WebEdit does not have the value of -" &Parameter& "-."
		End If
	ElseIf TextVariable <> "" Then

		Reporter.ReportEvent micPass, Desc & " captured", Desc & " captured with a value of: " & TextVariable

	End If

	VerifyVarText = TextVariable

End Function

'**********************************************************************
' Function Name: VerifyWebList
' Purpose: Verifies a weblist has the value of parameter passed in.
'Modfied By: Brian Buckhana
' Author:Adam Thomas
' Input:
'	WebListObject
'	Parameter
' Return: none
' Prerequisites:
'	methods:
'		ParameterDescription
''		ParameterValue
'**********************************************************************
Function VerifyWebList(WebListObject, Parameter)
	Dim stringLength
	Dim Verify
	Set oWL = WebListObject


	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(WebListObject, 5, ParameterDescription(Parameter,"Web List")) Then
		' Do nothing at the moment.
	Else
		' Exit the function maybe?
	End If

	Parameter = ParameterValue(Parameter)

	If Parameter <> "" Then
		HID = oWL.GetROProperty("html id")
		Verify = oWL.GetROProperty("value")
		VerifyAI = oWL.GetROProperty("all items")
		stringLength = len(Parameter)
		' Check for keywords; EX: <NULL>
		If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
			Select Case UCase(Verify)
			Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " ", "#0"
				Reporter.ReportEvent micPass, "Verify WebList '" & HID & "' is <NULL>", "The WebList has the value of <NULL>."
			Case Else
				Reporter.ReportEvent micFail, "Verify WebList '" & HID & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
			End Select
		Else
			If Instr(Parameter, ";") > 0 Then
				Parameter = Replace(Parameter,Chr(10),"")
				'Checking for list of items
				If uCase(VerifyAI) = uCase(Parameter) Then
					Reporter.ReportEvent micPass, "Verify WebList '" & HID & "'", "The WebList has the values of -" & ML(2) &Parameter& "-."
				Else
					Reporter.ReportEvent micFail, "Verify WebList '" & HID & "'", "The WebList does not have the values of -"& ML(2) &Parameter& ML(2) & "-.  It has -"& ML(2) &VerifyAI& "-."
				End If
			Else
				If uCase(Verify) = uCase(Parameter) AND mid(Verify, 1, 1) <> "<"  Then
					Reporter.ReportEvent micPass, "Verify WebList '" & HID & "'", "The WebList has the value of -" &Parameter& "-."
				Else
					Reporter.ReportEvent micFail, "Verify WebList '" & HID & "'", "The WebList does not have the value of -" &Parameter& "-.  It has -" &Verify& "-."
				End If
			End If
		End If
	End If
End Function

'**********************************************************************
' Function Name: VerifyWebImage
' Purpose: Verifies an image exists.
' Author:Brain Buckhana
' Input:
'	WebImageObject
'	WebImageName
' Return: none
' Prerequisites: none
'**********************************************************************
Function VerifyWebImage(WebImageObject, WebImageName)

	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(WebImageObject, 5, WebImageName) Then
		' Nothing at the moment.
	Else
		' Exit the function maybe?
	End If

End Function

'**********************************************************************
' Function Name: VerifyWebLink
' Purpose: Verifies a weblink has the value of parameter passed in.
' Author:Brian Buckhana
' Input:
'	WebLinkObject
'	Parameter
' Return:
' Prerequisites:
'	methods:
'		ParameterDescription
''		ParameterValue
'**********************************************************************
Function VerifyWebLink(WebLinkObject, Parameter)
	Dim exists
	Dim Verify
	Set oWL = WebLinkObject
'	HID = oWL.GetROProperty("html id")


	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(WebLinkObject, 5, ParameterDescription(Parameter,"Web Link")) Then
		' Do nothing at the moment.
	Else
		' Exit the function maybe?
	End If


	Parameter = ParameterValue(Parameter)

	If Parameter <> "" Then
		HID = oWL.GetROProperty("html id")
		Verify = oWL.GetROProperty("text")
		If uCase(Verify) = uCase(Parameter) Then
			Reporter.ReportEvent micPass, "Verify WebLink '" & HID & "'", "The WebLink has the value of -" &Parameter& "-."
		Else
			Reporter.ReportEvent micFail, "Verify WebLink '" & HID & "'", "The WebLink does not have the value of -" &Parameter& "-.  It has -" &Verify& "-."
		End If
	End If
End Function

'**********************************************************************
' Function Name:
' Purpose: Verifies an object exists and provides a report for it.  Saves time from writing multiple "If, Else" statements.
' Author: Brian Buckhana
' Input:
' Return:
' Prerequisites:
'	methods
'		ShortTimeOut
'		ReportingOff
'		ReportingOn
'		DefaultTimeOut
'**********************************************************************
Function VerifyObjectExists(WebObject, Timeout, ObjectName)
	ShortTimeOut
	Set WO = WebObject


	If WO.exist(Timeout) Then
		ReportingOff
		HID = WO.GetROProperty("html id")
		ReportingOn
		Reporter.ReportEvent micPass, "Verify " &ObjectName &" "& HID & " Exists", ObjectName & " exists on screen ."
		VerifyObjectExists = True
	Else
		'Reporter.ReportEvent micDone, "Verify " &ObjectName &" "& HID & " Exists", ObjectName & " does not exist on screen. If this object is suposed to be present, please do a manual investigation."
		VerifyObjectExists = False
	End If
	DefaultTimeOut
End Function

'**********************************************************************
' Function Name:VerifyWebElement
' Purpose: Verifies a weblist has the value of parameter passed in.
'Modfied By: Brian Buckhana
' Author:Adley Haywood
' Input:
'	WebElementObject
'	Parameter
' Return:
' Prerequisites:
'	Methods:
'		ParameterDescription
'		VerifyObjectExists
'		ParameterValue
'**********************************************************************
Function VerifyWebElement(WebElementObject, Parameter)
	Dim stringLength
	Dim Verify
	Set oWL = WebElementObject


	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(WebElementObject, 5, ParameterDescription(Parameter,"Web Element")) Then
		' Do nothing at the moment.
	Else
		' Exit the function maybe?
	End If

	Parameter = ParameterValue(Parameter)

	If Parameter <> "" Then
		HID = oWL.GetROProperty("html id")
		Verify = oWL.GetROProperty("innertext")
		stringLength = len(Parameter)
		' Check for keywords; EX: <NULL>
		If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
			Select Case UCase(Verify)
			Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " "
				Reporter.ReportEvent micPass, "Verify WebElement '" & HID & "' is <NULL>", "The WebElement has the value of <NULL>."
			Case Else
				Reporter.ReportEvent micFail, "Verify WebElement '" & HID & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
			End Select
		ElseIf uCase(Verify) = uCase(Parameter) AND mid(Verify, 1, 1) <> "<" Then
			Reporter.ReportEvent micPass, "Verify WebElement '" & HID & "'", "The WebElement has the value of -" &Parameter& "-."
		Else
			Reporter.ReportEvent micFail, "Verify WebElement '" & HID & "'", "The WebElement does not have the value of -" &Parameter& "-."
		End If
	End If
End Function

'**********************************************************************
' Function Name: VerifyWebRadioGroup
' Purpose: Verifies a web radio group based on parameter data.
'Modfied By: Brian Buckhana
' Author:Adley Haywood
' Input:
'	WebRadioGroupObject
'	Parameter
' Return:
' Prerequisites:
'	Methods:
'		VerifyObjectExists
'		ParameterDescription
'		ParameterValue
'**********************************************************************
Function VerifyWebRadioGroup(WebRadioGroupObject, Parameter)
	Dim stringLength
	Dim Verify
	Set WRG = WebRadioGroupObject
'	HID = WRG.GetROProperty("html id")


	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(WebRadioGroupObject, 5, ParameterDescription(Parameter,"Web Radio Group")) Then
		' Do nothing at the moment.
		Parameter = ParameterValue(Parameter)

		If Parameter <> "" Then
			HID = WRG.GetROProperty("html id")
			Verify = WRG.GetROProperty("value")
			stringLength = len(Parameter)
			' Check for keywords; EX: <NULL>
			If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
				Select Case UCase(Verify)
				Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " "
					Reporter.ReportEvent micPass, "Verify WebRadioGroup '" & HID & "' is <NULL>", "The WebRadioGroup has the value of <NULL>."
				Case Else
					Reporter.ReportEvent micFail, "Verify WebRadioGroup '" & HID & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
				End Select
			Else
				Select Case UCase(Parameter)
					Case "ON", "SELECT", "SELECTED", "CHECK", "CHECKED", TRUE, "TRUE", "0", "YES"
						If uCase(Verify) = "0" Then
							 Reporter.ReportEvent micPass, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup has the value of 'Yes' or 'On'"
						Else
							 Reporter.ReportEvent micFail, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup does not have the value of 'Yes' or 'On'"
						End If
					Case Else
						If uCase(Verify) = "1" Then
							 Reporter.ReportEvent micPass, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup has the value of 'No' or 'Off'"
						Else
							 Reporter.ReportEvent micFail, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup does not have the value of 'No' or 'Off'"
						End If
				End Select
			End If

		End If

	End If

End Function

'**********************************************************************
' Function Name: VerifyWebRadioGroupReverse
' Purpose:
' Author: Unknown
' Input:
'	WebRadioGroupObject
'	Parameter
' Return: None
' Prerequisites:
'	Methods:
'		VerifyObjectExists
'		ParameterDescription
'		ParameterValue
'**********************************************************************
Function VerifyWebRadioGroupReverse(WebRadioGroupObject, Parameter)
	Dim stringLength
	Dim Verify
	Set WRG = WebRadioGroupObject
'	HID = WRG.GetROProperty("html id")


	' Made it an if-else in case more functionality is to be added later.
	If VerifyObjectExists(WebRadioGroupObject, 5, ParameterDescription(Parameter,"Web Radio Group")) Then
		' Do nothing at the moment.
		Parameter = ParameterValue(Parameter)

		If Parameter <> "" Then
			HID = WRG.GetROProperty("html id")
			Verify = WRG.GetROProperty("value")
			stringLength = len(Parameter)
			' Check for keywords; EX: <NULL>
			If mid(Parameter, 1, 1) = "<" AND mid(Parameter, stringLength, 1) = ">"  Then
				Select Case UCase(Verify)
				Case "<NULL>", "<>", "<EMPTY>", "<NOTHING>", "<BLANK>", "<ISEMPTY>", "< >", "", " "
					Reporter.ReportEvent micPass, "Verify WebRadioGroup '" & HID & "' is <NULL>", "The WebRadioGroup has the value of <NULL>."
				Case Else
					Reporter.ReportEvent micFail, "Verify WebRadioGroup '" & HID & "' Improper Inputs", "Parameter: " &Parameter& ", Value: " &Verify
				End Select
			Else
				Select Case UCase(Parameter)
					Case "ON", "SELECT", "SELECTED", "CHECK", "CHECKED", TRUE, "TRUE", "1", "YES"
						If uCase(Verify) = "1" Then
							 Reporter.ReportEvent micPass, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup has the value of 'Yes' or 'On'"
						Else
							 Reporter.ReportEvent micFail, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup does not have the value of 'Yes' or 'On'"
						End If
					Case Else
						If uCase(Verify) = "0" Then
							 Reporter.ReportEvent micPass, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup has the value of 'No' or 'Off'"
						Else
							 Reporter.ReportEvent micFail, "Verify WebRadioGroup '" & HID & "'", "The WebRadioGroup does not have the value of 'No' or 'Off'"
						End If
				End Select
			End If

		End If

	End If

End Function

'**********************************************************************
' Function Name: MouseoverWebElement
' Purpose: Mouses over web element and performs the action you want performed.
' Author: Brian Buckhana
' Input:
'	WebElementObject
'	ActionOfWebElement
'	Parameter
' Return: None
' Prerequisites:
'	methods:
'		ParameterDescription
''		ParameterValue
'**********************************************************************
Function MouseoverWebElement(WebElementObject, ActionOfWebElement, Parameter)
	Set oWL = WebElementObject
	OrigVal = Setting.WebPackage("ReplayType")
	Select Case UCase(ActionOfWebElement)
		Case "CLICK"
			Setting.WebPackage("ReplayType") = 2
			oWL.FireEvent "onmouseover"
			oWL.Click
		Case "ENTER VALUE", "ENTERVALUE", "TYPE", "SET"
			Setting.WebPackage("ReplayType") = 2
			oWL.FireEvent "onmouseover"
			oWL.Set Parameter
		Case Else
			Setting.WebPackage("ReplayType") = 2
			oWL.FireEvent "onmouseover"
	End Select
	Setting.WebPackage("ReplayType") = OrigVal
End Function

'**********************************************************************
'Function Name: GetColumnWithCellText
'Purpose: '
'Call Function Using: objWebTable.GetColumnWithCellText(strSearchText, intSearchRow, blnExact)
'
'
'Inputs:
'  	None
'
'Parameters:
'	objTable - Webtable object
'	strSearchText - The text  that is to be searched for
'	intSearchRow - The row to search for strSearchText
'	blnExact - If True, then the strSearchText has to match precisely, otherwise the strSearchText only has to exist within the cell
'Prerequisite:
'	Send an active webtable
'Description:
'	This method will search the columns of a WebTable and return the column number of queried text
'Return Value:
'	Returns a 1 if the function failed
'Date:
'	11/27/2012
'
'Review Status:
'	Needs to be reviewed
'
'Change history:
'	11/27/12 -Justin Phlegar - Original
'

'Register the GetColumnWithCellText method
' Sample implementation:
' RegisterUserFunc "WebTable", "GetColumnWithCellText", "GetColumnWithCellText"
' Input:
' Return: integer
' Prerequisites:
'**********************************************************************
Public Function GetColumnWithCellText(objTable, strSearchText, intSearchRow, blnExact)
	Dim intNumColumns
	Dim intCurrentColumn
	Dim blnFound

	Reporter.Filter = rfDisableAll
	blnFound = False

	'Get the number of columns for the row being searched
	intNumColumns = objTable.ColumnCount(intSearchRow)

	'Loop through each row and search for queried text. If the text if found, then break the loop
	For intCurrentColumn = 1 To intNumColumns
		If blnExact Then
			If(strSearchText = objTable.GetCellData(intSearchRow, intCurrentColumn))Then
				blnFound = True
				Exit For
			End If
		Else
			If(InStr(1,objTable.GetCellData(intSearchRow, intCurrentColumn),strSearchText))Then
				blnFound = True
				Exit For
			End If
		End If
	Next

	Reporter.Filter = rfEnableAll
	'Output findings
	If blnFound Then
		GetColumnWithCellText = intCurrentColumn
	Else
		GetColumnWithCellText = 0
	End If
End Function
